function status = runScriptOnFolder(folder, scriptName)
% RUNSCRIPTONFOLDER - Execute a MATLAB script within a specified folder.
%
%   This function executes a MATLAB script within a specified folder and tracks
%   the script's impact on files within the folder. It captures file status
%   information (Unmodified, Modified, New, Deleted) and generates a log file.
%   This function is used by the DataViewer app.
%
%   Inputs:
%   - folder: The folder where the script will be executed.
%   - scriptName: The name of the script to execute. If the .m extension is
%     missing, it will be added automatically.
%
%   Returns:
%   - status: A boolean value indicating the execution status (true for successful,
%     false for failed).
%   Notes:
%   - The scriptName parameter can specify either the script name with or without
%     the .m extension. It is advisable to add the fullpath of the script,
%     if it is not in Matlab's path already.
%   - The log file generated by this function captures script details, execution
%     status, error messages, and file status before and after script execution.
%   - File status can be 'Unmodified', 'Modified', 'New', or 'Deleted'.
%   - The log file is saved with a name like 'log_yyyymmddHHMMSS.txt'.
%   - Make sure the specified folder exists.

p = inputParser;
addRequired(p,'folder',@isfolder);
addRequired(p,'scriptName',@(x) isfile(x) | isfile([x '.m']));
parse(p,folder,scriptName);
clear p

% Check if the scriptName has a .m extension and add it if missing.
if ~endsWith(scriptName, '.m')
    scriptName = [scriptName, '.m'];
end
origFolder = pwd;
% Add the script to the MATLAB path.
scriptFolder = fileparts(scriptName);
if isempty(scriptFolder)
    % Force full path to the original script from current directory
    scriptName = fullfile(pwd,scriptName);
end
% Change the current working directory to the specified folder.
cd(folder);
% Get information about all files before script execution (only imaging data files).
fileInfo_preExec = cellfun(@(x) dir(fullfile(pwd, x)), getFileList(pwd, 'all'));
% Execute the script and capture any errors.
try
    % Initialize variables.
    status = true;
    execTimeStamp = now;
    errorReport = '';
    [~,name,~] = fileparts(scriptName);
    localScriptName = fullfile(pwd,[name '.m']);
    
    % Remove original script from Matlab's cache:
    clear(scriptName);
    
    % Add local copy of the script and use it. This will ensure that Matlab
    % will not change the current directory to the one from the script.
    copyfile(scriptName,localScriptName);  
    
    bAdd2Path = false;
    if any(which(scriptName))
        % Remove original script from path:
        rmpath(fileparts(scriptName))
        bAdd2Path = true;
    end
    % Execute local copy of script
    run(localScriptName);        
    if bAdd2Path
        % Put the original script back to Matlab's path:
        addpath(fileparts(scriptName));
    end
    
catch ME
    status = false;
    errorReport = getReport(ME, 'basic', 'hyperlinks', 'off');
end

% Remove local copy of script:
delete(fullfile(pwd,[name '.m'])); 
% Get information about all files after script execution.
fileInfo_postExec = cellfun(@(x) dir(fullfile(pwd, x)), getFileList(pwd, 'all'));
% Classify each file status after script execution.
[fileStatus, fileInfo_postExec] = classifyFileStatus(fileInfo_preExec,fileInfo_postExec);
% Create a log using the genLog function.
genLog(scriptName, status, errorReport, table({fileInfo_postExec.name}', fileStatus, 'VariableNames', {'File', 'Status'}), execTimeStamp);
% Revert current directory to original:
cd(origFolder);
end

% Local functions
function [fileStatus, fileInfo_postExec] = classifyFileStatus(fileInfo_preExec, fileInfo_postExec)
% CLASSIFYFILESTATUS - Classify the status of files based on pre- and post-execution information.
%
%   This function compares the properties of files in two sets of file information,
%   fileInfo_preExec (before script execution) and fileInfo_postExec (after script execution),
%   and classifies each file's status as one of the following:
%
%   - 'Unmodified': The file remains unchanged.
%   - 'Modified': The file has been modified.
%   - 'New': The file is new and was not present before execution.
%   - 'Deleted': The file was present before execution but is now deleted.
%
%   Parameters:
%   fileInfo_preExec - Information about files before script execution.
%   fileInfo_postExec - Information about files after script execution.
%
%   Returns:
%   fileStatus - A cell array of strings representing the status of each file.
%   fileInfo_postExec - Updated file information including any newly added files.

fileStatus = cell(size(fileInfo_postExec));
for jj = 1:length(fileInfo_postExec)
    idx = strcmp(fileInfo_postExec(jj).name, {fileInfo_preExec.name}');
    if ~any(idx)
        fileStatus{jj} = 'New';
        continue
    end
    if ~isequaln(fileInfo_postExec(jj).datenum, fileInfo_preExec(idx).datenum)
        fileStatus{jj} = 'Modified';
    else
        fileStatus{jj} = 'Unmodified';
    end
end
% Append list of deleted files:
idxMiss = ~ismember({fileInfo_preExec.name}',{fileInfo_postExec.name}');
if any(idxMiss)
    fileInfo_postExec = [fileInfo_postExec; fileInfo_preExec(idxMiss)];
    fileStatus = [fileStatus; repmat({'Deleted'},sum(idxMiss),1)];
end

end

function genLog(scriptName, status, errMsg, fileTable, execTime)
% GENLOG - Create a log file for script execution.
%
%   GENLOG creates a text file that captures details of a script execution,
%   including script information, execution status, error messages, file status,
%   and the script's content.
%
%   Inputs:
%   - scriptName: The name of the executed script.
%   - status: The execution status (true for successful, false for failed).
%   - errMsg: Error message in case of failure.
%   - fileTable: Table containing file status information.
%   - execTime: Execution date and time.
%
%   Notes:
%   - The log file will be saved with a name in the format 'log_yyyymmddHHMMSS.txt'.
%   - In case of successful execution, the error message will be empty ('').
%   - The log contains sections for script information, file status, and error messages.
%   - The script's content is included in the log.

% Create a mapping for boolean status values to descriptive labels.
boolMap = containers.Map([false true], {'Failed', 'Successful'});

% If execution was successful, clear the error message.
if status
    errMsg = sprintf('No errors\n');
end

% Create a log header.
header = sprintf('Script name: "%s"\nFolder name: "%s"\nExecution date time: "%s"\nExecution status: "%s"',...
    scriptName, pwd, datestr(execTime, 'HH:MM:ss dd/mm/yyyy'), boolMap(status));

% Convert the file table to text.
fileTabTxt = tableToTextConverter(fileTable);

% Read the contents of the executed script.
scriptTxt = fileread(scriptName);

% Calculate the maximum line width for formatting.
mxErrMsg = diff(regexp(errMsg,'\n')); if isempty(mxErrMsg); mxErrMsg = length(errMsg);end
maxWidth = max([diff(regexp(header, '\n')), diff(regexp(fileTabTxt, '\n')), diff(regexp(scriptTxt, '\n')), mxErrMsg]);

% Create the log text.
log = sprintf('+%s+\n%s\n+%s+\n%s\n+%s+\n%s\n+%s+\n%s\n+%s%+',...
    pad('----- Batch Script Log ', maxWidth, 'right', '-'), header,...
    pad('----- File status after script execution ', maxWidth, 'right', '-'),...
    fileTabTxt, pad('----- Error Messages ', maxWidth, 'right', '-'),...
    errMsg, pad('----- Copy of the script executed ', maxWidth, 'right', '-'),...
    scriptTxt, pad('', maxWidth, 'right', '-'));

% Save the log to a file.
logFileName = ['log_', datestr(execTime, 'yyyymmddHHMMSS'), '.txt'];
fid = fopen(logFileName, 'w');
fwrite(fid, log);
fclose(fid);
end