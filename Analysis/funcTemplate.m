%% Templates for creating functions in umIT
%
% Below are some templates that can be used to build your own function in umIT:
% For more details, please refer to the documentation.
%

%% Template #1: Data import
function outFile = funcTemplate1(RawFolder, SaveFolder, varargin)
% FUNCTEMPLATE1 can be used to create a data import function where the raw
% data is accessed in the "RawFolder" and saved in the "SaveFolder". The
% output "outFile" is a list of files created by the function (e.g.,
% fluo.dat, red.dat ...)
%  Optional inputs (varargin):
% Here, we can add parameters to the function using a structure named "opts".
%

% Defaults: !Important. Each default variable should be stated in a single line!
default_Output = {'file1.dat', 'file2.dat','fileN.dat'}; %#ok This is here only as a reference for PIPELINEMANAGER.m. The real outputs will be stored in OUTFILE.
default_opts = struct('ParamNum', 1, 'ParamStr', 'val', 'ParamBool', false, 'ParamMultiChoice','Option1');
opts_values = struct('ParamNum', [1:5], 'ParamStr',{{'val'}},'ParamBool',[false, true], 'ParamMultiChoice', {{'Option1', 'Option2','Option3'}'});%#ok  % This is here only as a reference for PIPELINEMANAGER.m.
%

%%% Arguments parsing and validation %%%
p = inputParser;
% The input of the function must be a File , RawFolder or SaveFolder
addRequired(p, 'RawFolder', @isfolder)% For Raw Folder as input
addRequired(p, 'SaveFolder', @isfolder); % For Save Folder as input
addOptional(p, 'opts', default_opts,@(x) isstruct(x) && ~isempty(x));
% Parse inputs:
parse(p,RawFolder, SaveFikder, varargin{:});
%Initialize Variables:
RawFolder = p.Results.RawFolder;
SaveFolder = p.Results.SaveFolder;
opts = p.Results.opts;
clear p
%%%%

%%%%%----------------------------------------------------------------------
% Run your code here:
%%%%%----------------------------------------------------------------------

%%%%%----------------------------------------------------------------------
% To save imaging data to a .dat file, use the save2Dat function as:
% Create the data using your code and create a "metaData" structure using:
new_dimensions = {'Y','X','T'}; % Example of data containing image time series.
metaData = genMetaData(data,new_dimensions);
% Create the full path of the new file to be saved:
newFile = fullpath(SaveFolder,'file1.dat');
% Save the file
save2Dat(newFile, data, metaData);
% Repeat this for each file.
%%%%%----------------------------------------------------------------------

% Create the list of files generated by the function:
outFile = {'file1.dat','file2.dat'};

end

%% Template #2a: Data processing
function outData = funcTemplate2a(data, metaData)
% FUNCTEMPLATE2a represents a simple case where an input data is processed
% and gives an output with the same dimensions as "data". Optional
% parameters can be added using as "varargin" (see template #1).

% Defaults:
default_Output = 'DEFAULT_FILENAME.dat'; %#ok. This line is here just for Pipeline management.
%

%%% Arguments parsing and validation %%%
p = inputParser;
% The input of the function must be a File , RawFolder or SaveFolder
addRequired(p, 'data')% The input data. Here, you can add a validation function to ensure that data has the necessary properties.
addRequired(p,'metaData', @(x) isa(x,'matlab.io.MatFile') | isstruct(x)); % MetaData associated to "data".
% Parse inputs:
parse(p,data, metaData);
%Initialize Variables:
data = p.Results.data;
metaData = p.Results.metaData;
clear p
%%%%

%%%%%----------------------------------------------------------------------
% Run your code here:
%%%%%----------------------------------------------------------------------

%%%%%----------------------------------------------------------------------
% Create the output data. For example:
outData = data./mean(data,'all','omitnan');
%%%%%----------------------------------------------------------------------

end

%% Template #2b: Data processing
function [outData, metaData] = funcTemplate2b(data, metaData)
% FUNCTEMPLATE2b represents a case where an input data is processed
% and gives an output data with different dimensions as "data". Optional
% parameters can be added using as "varargin" (see template #1).

% Defaults:
default_Output = 'DEFAULT_FILENAME.dat'; %#ok. This line is here just for Pipeline management.
%

%%% Arguments parsing and validation %%%
p = inputParser;
% The input of the function must be a File , RawFolder or SaveFolder
addRequired(p, 'data')% The input data. Here, you can add a validation function to ensure that data has the necessary properties.
addRequired(p,'metaData', @(x) isa(x,'matlab.io.MatFile') | isstruct(x)); % MetaData associated to "data".
% Parse inputs:
parse(p,data, metaData);
%Initialize Variables:
data = p.Results.data;
metaData = p.Results.metaData;
clear p
%%%%

%%%%%----------------------------------------------------------------------
% Run your code here:
%%%%%----------------------------------------------------------------------

%%%%%----------------------------------------------------------------------
% Create the output data. For example:
outData = data./mean(data,'all','omitnan');
% Create the metaData associated with "outData":
new_dimensions = {'Y','X'};
metaData = genMetaData(outData, new_dimensions);
%%%%%----------------------------------------------------------------------
end

%% Template #3: Data analysis
% Here, the data analysis means that calculations that are performed on
% regions of interest generating results with reduced dimensions, meaning
% that the output data will contain a smaller amount of information than
% the original data. 
% This reduction in dimensionality can be achieved through techniques
% such as feature extraction or dimensionality reduction, and allows 
% for easier interpretation and analysis of the data. 
% Ultimately, the function's goal is to extract meaningful information from 
% the imaging data that can be used for further analysis or visualization.


function outData = funcTemplate3(data, metaData)
% FUNCTEMPLATE3A represents a data analysis function. Here, a "data
% analysis" function will use the input data (e.g., imaging data such as
% image time series) and perform calculations on regions of interests. 

% In this case, the output "outData" is created using the function
% "genDataMetaStructure". It consists of a structure that contain the meta
% data information and the data segregated by region of interest.

% Defaults:
default_Output = 'DEFAULT_FILENAME.mat'; %#ok This line is here just for Pipeline management.
%

%%% Arguments parsing and validation %%%
p = inputParser;
% The input of the function must be a File , RawFolder or SaveFolder
addRequired(p, 'data')% The input data. Here, you can add a validation function to ensure that data has the necessary properties.
addRequired(p,'metaData', @(x) isa(x,'matlab.io.MatFile') | isstruct(x)); % MetaData associated to "data".
% Parse inputs:
parse(p,data, metaData);
%Initialize Variables:
data = p.Results.data;
metaData = p.Results.metaData;
clear p
%%%%

%%%%%----------------------------------------------------------------------
% Run your code here:
% Create a list of names of regions of interest:
obsID = {'ROI1','ROI2','ROI3','ROIN'};
% Calculate the data for each region of interest:
dataOut = {10,12,11,30};
% Create the new dimensions of the data. Here, the first dimension should
% be always "O" (observation).
dim_name = {'O'}; %
%%%%%----------------------------------------------------------------------

%%%%%----------------------------------------------------------------------
% Create the output data. The function "genDataMetaStructure" merges the
% data for each observation and the content of "metaData" in a single
% structure.
outData = genDataMetaStructure(dataOut,obsID,dim_name,metaData);
%%%%%----------------------------------------------------------------------
end

