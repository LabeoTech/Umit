function ConvertToTiff(SavePath, varargin)
% This function converts the binary files (.dat) generated by the
% ImagesClassification script to tiff (or big tiff files).
%
% Important: This function works only with image time series data (i.e.,
% data with dimensions: X,Y,T)!
%
% Inputs:
%   SavePath(str): Path to the folder where the .dat files are located.
%   datFileName(str or cell, optional): Name or cell array of names of .dat
%       files in "FolderPath" to be converted. Use this option to convert .dat
%       files that were not generated by the function "ImagesClassification".
%   --- Special case: FOR USAGE BY UMIT ONLY ---
%   data (3D or 4D numerical array): imaging data to be transformed to
%       TIFF.
%   fileName (str): name of the TIFF file(s) containing "data".

% Examples:
% 1- ConvertToTiff(pwd);
%   Converts all .dat files in the current folder that were created by
%   the function "ImagesClassification".
% 2- ConvertToTiff(pwd, 'hemoCorr_fluo.dat');
%   Converts only the file "hemoCorr_fluo.dat" located in the current
%   folder.
% 3- ConvertToTiff(pwd, {'hemoCorr_fluo.dat', 'GSR.dat'});
%   Converts the files "hemoCorr_fluo.dat" and "GSR.dat" in the current folder.

% Check folder string:
if( ~strcmp(SavePath(end),filesep) )
    SavePath = strcat(SavePath, filesep);
end
% Check input arguments to decide which function to use:
if nargin == 1
    convertFromFile(SavePath,[]);
elseif nargin == 2 && ( ischar(varargin{1}) || iscell(varargin{1}) )
    convertFromFile(SavePath,varargin{:});
elseif nargin == 3 && isnumeric(varargin{1}) && ischar(varargin{2})
    % To be used by umIT:
    fileName = fullfile(SavePath,varargin{2});
    convertFromData(varargin{1}, fileName);
end

% Local functions:
    function convertFromFile(FolderPath, datFileName)
        % Converts to TIFF from files saved in "FolderPath" and save them in the
        % same folder.
                
        disp(['Starting Tiff conversion for files in folder: ' FolderPath]);
        % End function if no .dat files are found:
        if( isempty(dir([FolderPath '*.dat'])) )
            disp('No dat file found. End of convertion.');
            return
        end
        % If a list of files is provided, convert only files in the list:
        if ~isempty(datFileName)            
            if ischar(datFileName)
                datFileName = {datFileName};
            end
            ChanList = cellfun(@(x) dir(x), fullfile(FolderPath,datFileName), 'UniformOutput',false);
            ChanList = vertcat(ChanList{:});
            InfList = cellfun(@(x) dir(fullfile(FolderPath,strrep(x, '.dat', '.mat'))), {ChanList.name}, 'UniformOutput',false);
            InfList = vertcat(InfList{:});
        else
            % Look for .data and .mat files from ImagesClassification function
            % ONLY:
            datList = {'red.dat','green.dat', 'yellow.dat', 'fluo*.dat','speckle.dat',...
                'flow.dat','*Chan.dat'};
            ChanList = cellfun(@(x) dir(x), fullfile(FolderPath, datList), 'UniformOutput',false);
            ChanList = vertcat(ChanList{:});% List of names of output data files from ImagesClassification.
            %
            matList = {'red.mat', 'green.mat', 'yellow.mat', 'fluo*.mat', 'speckle.mat',...
                'flow.mat', 'Data_*.mat'}; % List of names of output meta data files from ImagesClassification.
            InfList = cellfun(@(x) dir(x), fullfile(FolderPath, matList), 'UniformOutput',false);
            InfList = vertcat(InfList{:});
        end
        if isempty(InfList) || isempty(ChanList)
            disp('No file(s) found! End of convertion.');
            return
        end
        
        tic
        for indC = 1:size(ChanList,1)
            ChanName = ChanList(indC).name;
            fid = fopen([FolderPath ChanName]);
            tag = ChanName(1:(strfind(ChanName,'.') - 1));
            
            % Find .mat file associated with the .dat file:
            if any(startsWith({InfList.name}, 'Data_'))
                %Previous file format:
                idx = arrayfun(@(X) contains(InfList(X).name,['_' ChanName(1)],'IgnoreCase',true), 1:size(InfList,1));
            else
                %New file format:
                idx = arrayfun(@(X) contains(InfList(X).name, tag,'IgnoreCase',true), 1:size(InfList,1));
            end
            if ~any(idx)
                continue
            end
            Infos = matfile([FolderPath InfList(idx).name]);
            outFName = [FolderPath 'img_'];
            switch(ChanName)
                case 'green.dat'
                    disp('Saving green channel.');
                    outFName = strcat(outFName, 'Green.tif');
                case 'red.dat'
                    disp('Saving red channel.');
                    outFName = strcat(outFName, 'Red.tif');
                case 'yellow.dat'
                    disp('Saving amber channel.');
                    outFName = strcat(outFName, 'Yellow.tif');
                case {'fluo.dat', 'fluo_475.dat'}
                    disp('Saving fluo channel.');
                    outFName = strcat(outFName, 'Fluo.tif');
                case 'speckle.dat'
                    disp('Saving speckle channel.');
                    outFName = strcat(outFName, 'Speckle.tif');
                case 'flow.dat'
                    disp('Saving flow channel.');
                    outFName = strcat(outFName, 'Flow.tif');
                otherwise
                    disp(['Saving ' tag '.'])
                    outFName = strcat(outFName, [tag '.tif']);
            end
            
            file = dir([FolderPath ChanName]);
            if (file.bytes < 3900000000)
                fTIF = Fast_Tiff_Write(outFName,1,0);
            else
                fTIF = Fast_BigTiff_Write(outFName,1,0); %BigTiff over 4 GB (3.9 GB to be safe and account for headers)
                disp('Using BigTiff format')
            end
            
            chunkSize = 100; %Read and save a chunk of images at the same time. A higher value is faster, but is limited by the computer RAM
            for idxImage = 0:chunkSize:Infos.datLength-1 %Read all images in the file
                %Read chunks of images
                if strcmpi(ChanName,'flow.dat')
                    dat = fread(fid, Infos.datSize(1,1)*Infos.datSize(1,2)*chunkSize, 'single=>single');
                else
                    dat = fread(fid, Infos.datSize(1,1)*Infos.datSize(1,2)*chunkSize, 'single=>uint16');
                end
                if (~isempty(dat))
                    nImages = size(dat,1)/Infos.datSize(1,1)/Infos.datSize(1,2);
                    dat = reshape(dat,Infos.datSize(1,1),Infos.datSize(1,2),nImages);
                    
                    %Tif write using https://github.com/rharkes/Fast_Tiff_Write
                    %Requires "Fast_Tiff_Write.m" and "Fast_BigTiff_Write.m"
                    for idxImageWrite = 1:nImages
                        fTIF.WriteIMG(squeeze(dat(:,:,idxImageWrite))');
                    end
                    
                    %OPTIONAL: Display 1 image per chunk
                    %             imagesc(squeeze(dat(:,:,1)));
                    %             title(num2str(idxImage+1))
                    %             pause(0.01)
                    
                    %Progress message
                    disp([num2str(idxImage+nImages) '/' num2str(Infos.datLength) ' images done.'])
                    
                end
            end
            fclose(fid);
            fTIF.close;
            
        end
        disp('Tiff conversion is done.')
        toc
    end
    function convertFromData(data, outFName)
        % Converts directly from data. This is used by umIT only.        
        file = whos('data');        
        if (file.bytes < 3900000000)
            fTIF = Fast_Tiff_Write(outFName,1,0);
        else
            fTIF = Fast_BigTiff_Write(outFName,1,0); %BigTiff over 4 GB (3.9 GB to be safe and account for headers)
            disp('Using BigTiff format')
        end
          w = waitbar(0, 'Saving data to .TIF ...');
        for idxImageWrite = 1:size(data,3)
            %Read all images in the file                    
            %Tif write using https://github.com/rharkes/Fast_Tiff_Write
            %Requires "Fast_Tiff_Write.m" and "Fast_BigTiff_Write.m"
            fTIF.WriteIMG(squeeze(data(:,:,idxImageWrite))');            
            waitbar(idxImageWrite/size(data,3),w);
        end                
        fTIF.close;
        delete(w)                
    end
end